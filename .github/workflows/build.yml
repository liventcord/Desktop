name: Build and Release Neutralino.js App

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js and install Neutralino CLI
        run: |
          npm install -g @neutralinojs/neu
          neu create neutralino-app
          cd neutralino-app
          neu build --release

      - name: Check dist directory
        run: ls -R neutralino-app/dist

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: neutralino-app
          path: neutralino-app/dist/*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: neutralino-app

      - name: List downloaded files
        run: ls -R

      - name: Extract compressed files
        run: |
          find neutralino-app -type f \( -iname \*.zip -o -iname \*.tar -o -iname \*.gz \) -exec bash -c '
            for file; do
              case "$file" in
                *.zip) unzip "$file" -d "${file%.zip}" ;;
                *.tar) tar -xf "$file" -C "${file%.tar}" ;;
                *.gz) gunzip "$file" ;;
              esac
            done
          ' bash {} +

      - name: Find valid binary files
        id: find_binaries
        run: |
          # Find binaries by extension and by checking for executable permissions
          valid_binaries=$(find neutralino-app -type f \( -iname "*.exe" -o -iname "*.bin" -o -iname "*.tar" -o -iname "*.zip" -o -iname "*.gz" \) -exec file --mime-type {} \; | grep -E 'application/(x-tar|zip|gzip|octet-stream|x-7z-compressed|x-dosexec|x-msdownload)' | cut -d: -f1)

          # Include files that are executables but have no extensions (Linux/macOS)
          executables_no_extension=$(find neutralino-app -type f -exec file {} \; | grep -i 'executable' | cut -d: -f1)

          # Combine both binary lists
          binaries="$valid_binaries $executables_no_extension"

          echo "BINARY_FILES=$binaries" >> $GITHUB_ENV
          echo "Found binaries: $binaries"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: main
          name: Release ${{ github.ref }}
          body: "Release of the Neutralino app"
          files: ${{ env.BINARY_FILES }}
          token: ${{ secrets.GITHUB_TOKEN }}
