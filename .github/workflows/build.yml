name: Build and Release Neutralino.js App

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js and install Neutralino CLI
        run: |
          npm install -g @neutralinojs/neu
          neu create neutralino-app
          cd neutralino-app
          neu build --release

      - name: Check dist directory
        run: ls -R neutralino-app/dist

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: neutralino-app
          path: neutralino-app/dist/*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: neutralino-app

      - name: List downloaded files
        run: ls -R

      - name: Extract compressed files
        run: |
          find neutralino-app -type f \( -iname \*.zip -o -iname \*.tar -o -iname \*.gz \) -exec bash -c '
            for file; do
              case "$file" in
                *.zip) unzip "$file" -d "${file%.zip}" ;;
                *.tar) tar -xf "$file" -C "${file%.tar}" ;;
                *.gz) gunzip "$file" ;;
              esac
            done
          ' bash {} +

      - name: Specify release files based on platform regex
        id: find_binaries
        run: |
          # Define release files to be included in the release
          release_files="neutralino-app/neutralino-app-win_x64.exe \
          neutralino-app/neutralino-app-mac_arm64 \
          neutralino-app/neutralino-app-mac_universal \
          neutralino-app/neutralino-app-linux_armhf \
          neutralino-app/neutralino-app-linux_x64 \
          neutralino-app/neutralino-app-mac_x64"

          # Ensure files exist and collect them into a list
          valid_binaries=""
          for file in $release_files; do
            if [[ -f "$file" ]]; then
              valid_binaries="$valid_binaries $file"
            fi
          done

          # Export the binaries as a space-separated string
          echo "BINARY_FILES=$valid_binaries" >> $GITHUB_ENV
          echo "Found valid binaries: $valid_binaries"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: main
          name: Release ${{ github.ref }}
          body: "Release of the Neutralino app"
          files: ${{ env.BINARY_FILES }}
          token: ${{ secrets.GITHUB_TOKEN }}
